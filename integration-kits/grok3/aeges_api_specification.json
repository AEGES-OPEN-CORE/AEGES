{
  "name": "AEGES Integration Kit (Grok3)",
  "version": "1.0.0",
  "generated_at": "2025-08-10T00:00:00Z",
  "description": "Enhanced multi-provider AI integration for AEGES with demo/dev/prod capability, input validation, rate limiting, consensus mode, metrics, and health checks.",
  "module": {
    "entry": "integration-kits/grok3/aeges_enhanced_integration.js",
    "exports": [
      "GrokAEGESIntegration",
      "MultiAIAnalyzer",
      "AIProviderManager",
      "AI_CONFIG"
    ]
  },
  "environment": {
    "XAI_API_KEY": "string (required for xAI provider in dev/prod; unused in demo)",
    "OPENAI_API_KEY": "string (optional fallback)",
    "ANTHROPIC_API_KEY": "string (optional fallback)",
    "NODE_ENV": "development | production (optional)",
    "PROVIDER_PREFERENCE": "comma-separated list of providers (optional)",
    "RATE_LIMIT_RPS": "number (optional; if set, overrides defaults where applicable)"
  },
  "config": {
    "AI_CONFIG": {
      "providers": {
        "xai": {
          "enabled": "boolean (true if XAI_API_KEY present)",
          "endpoint": "https://api.x.ai/v1/chat/completions",
          "model": "grok-beta",
          "maxTokens": 2048,
          "rateLimit": { "requests": 1000, "window": 60000 },
          "description": "xAI Grok 3 - Advanced reasoning and analysis"
        },
        "openai": {
          "enabled": "boolean (true if OPENAI_API_KEY present)",
          "endpoint": "https://api.openai.com/v1/chat/completions",
          "model": "gpt-4",
          "maxTokens": 2048,
          "rateLimit": { "requests": 500, "window": 60000 },
          "description": "OpenAI GPT-4 - Reliable analysis capabilities"
        },
        "anthropic": {
          "enabled": "boolean (true if ANTHROPIC_API_KEY present)",
          "endpoint": "https://api.anthropic.com/v1/messages",
          "model": "claude-3-sonnet-20240229",
          "maxTokens": 2048,
          "rateLimit": { "requests": 300, "window": 60000 },
          "description": "Anthropic Claude - Constitutional AI alignment"
        },
        "mock": {
          "enabled": true,
          "latency": { "min": 200, "max": 800 },
          "description": "Demo Mode - Full-featured simulation"
        }
      },
      "fallbackOrder": ["xai", "openai", "anthropic", "mock"],
      "consensusThreshold": 0.7
    }
  },
  "classes": {
    "AIProviderManager": {
      "constructor": { "args": [] },
      "properties": [
        "rateLimiter: RateLimiter",
        "eventEmitter: EventEmitter",
        "activeProviders: Array<{name: string, enabled: boolean, ...providerConfig}>"
      ],
      "events": {
        "analysis_complete": {
          "payload": { "provider": "string", "duration": "number(ms)", "success": true }
        },
        "analysis_error": {
          "payload": { "provider": "string", "error": "string", "duration": "number(ms)" }
        }
      },
      "methods": {
        "getActiveProviders": {
          "args": [],
          "returns": "Array<{ name: string, description: string, ... }>"
        },
        "callProvider": {
          "args": [
            { "name": "provider", "type": "xai | openai | anthropic | mock" },
            { "name": "prompt", "type": "string" },
            { "name": "options", "type": "object", "optional": true }
          ],
          "returns": {
            "provider": "string",
            "response": "string",
            "confidence": "number(0..0.95)",
            "duration": "number(ms)",
            "model": "string"
          },
          "errors": ["Error('Rate limit exceeded ...')", "Error('Unexpected response format')", "AbortError", "Fetch/HTTP errors"]
        },
        "makeAPICall": {
          "args": [
            { "name": "config", "type": "ProviderConfig" },
            { "name": "prompt", "type": "string" },
            { "name": "options", "type": "object", "optional": true }
          ],
          "returns": { "content": "string", "raw": "object" }
        },
        "mockAnalysis": {
          "args": [
            { "name": "prompt", "type": "string" },
            { "name": "options", "type": "object", "optional": true }
          ],
          "returns": { "content": "string", "raw": { "mock": true, "prompt_type": "behavioral|threat|consensus" } }
        },
        "calculateConfidence": {
          "args": [{ "name": "response", "type": "{content:string, raw:object}"}],
          "returns": "number(0..0.95)"
        }
      }
    },
    "GrokAEGESIntegration": {
      "constructor": {
        "args": [
          {
            "name": "options",
            "type": "{ enableConsensus?: boolean, primaryProvider?: 'xai'|'openai'|'anthropic'|'mock' }",
            "optional": true
          }
        ],
        "initializes": [
          "aiManager: AIProviderManager",
          "enableConsensus: boolean",
          "primaryProvider: string",
          "metrics: { totalAnalyses:number, averageLatency:number, successRate:number, providerUsage:Record<string,number> }"
        ]
      },
      "methods": {
        "analyzeTransactionWithAI": {
          "description": "Validates transaction data, builds prompt, runs single-provider or consensus analysis.",
          "args": [
            {
              "name": "transactionData",
              "type": "{ id:string, amount:number>=0, timestamp:number|ISOstring, from:string, to:string, network?:string }"
            },
            { "name": "options", "type": "{ analysisType?: 'behavioral'|'threat'|'consensus'|'comprehensive', ... }", "optional": true }
          ],
          "returns": {
            "when enableConsensus=false": {
              "analysis": "string",
              "provider": "string",
              "confidence": "number",
              "duration": "number(ms)",
              "model": "string",
              "consensus": false
            },
            "when enableConsensus=true": {
              "analysis": "string (aggregated)",
              "providers": "string[]",
              "confidence": "number",
              "duration": "number(ms, max across providers)",
              "consensus": true,
              "agreement": "boolean (avg confidence > consensusThreshold)"
            }
          },
          "errors": ["Error('Missing required field ...')", "Error('All AI providers failed')", "Error('Analysis failed: ...')"]
        },
        "generateAnalysisPrompt": {
          "args": [
            { "name": "transactionData", "type": "object (see above)" },
            { "name": "options", "type": "object", "optional": true }
          ],
          "returns": "string (structured prompt)"
        },
        "performSingleProviderAnalysis": {
          "args": [{ "name": "prompt", "type": "string" }, { "name": "options", "type": "object", "optional": true }],
          "returns": {
            "analysis": "string",
            "provider": "string",
            "confidence": "number",
            "duration": "number(ms)",
            "model": "string",
            "consensus": false
          }
        },
        "performConsensusAnalysis": {
          "args": [{ "name": "prompt", "type": "string" }, { "name": "options", "type": "object", "optional": true }],
          "returns": {
            "analysis": "string",
            "providers": "string[]",
            "confidence": "number",
            "duration": "number(ms)",
            "consensus": true,
            "agreement": "boolean"
          }
        },
        "calculateConsensus": {
          "args": [{ "name": "responses", "type": "Array<{provider:string, response:string, confidence:number, duration:number}>"}],
          "returns": {
            "aggregatedAnalysis": "string",
            "confidence": "number",
            "agreement": "boolean"
          }
        },
        "updateMetrics": {
          "args": [{ "name": "data", "type": "{ provider:string, duration:number, success:boolean }"}],
          "returns": "void"
        },
        "getMetrics": {
          "args": [],
          "returns": {
            "totalAnalyses": "number",
            "averageLatency": "number(ms, rounded)",
            "successRate": "number(0..1)",
            "providerUsage": "Record<string, number>",
            "availableProviders": "Array<{name:string, description:string, enabled:true}>",
            "configuration": {
              "primaryProvider": "string",
              "consensusEnabled": "boolean",
              "targetLatency": "string ('< 800ms')"
            }
          }
        },
        "healthCheck": {
          "args": [],
          "returns": {
            "overall": "healthy | unhealthy",
            "providers": "Record<string, {status:'healthy'|'unhealthy', latency?:number, model?:string, error?:string}>",
            "timestamp": "ISO-8601 string"
          }
        }
      }
    },
    "MultiAIAnalyzer": {
      "constructor": { "args": [], "initializes": ["integration: GrokAEGESIntegration (consensus enabled)"] },
      "methods": {
        "analyzeWithMultipleProviders": {
          "args": [
            { "name": "transactionData", "type": "object (same as analyzeTransactionWithAI)" },
            { "name": "analysisTypes", "type": "Array<'behavioral'|'threat'|'consensus'>", "optional": true, "default": ["behavioral","threat","consensus"] }
          ],
          "returns": {
            "transactionId": "string",
            "analyses": "Record<string, { analysis?:string, providers?:string[], confidence?:number, duration?:number, consensus?:boolean, agreement?:boolean, error?:string }>",
            "timestamp": "ISO-8601 string",
            "summary": { "totalAnalyses": "number", "successfulAnalyses": "number", "averageConfidence": "number(0..1)", "recommendedAction": "proceed | review" }
          }
        },
        "generateSummary": {
          "args": [{ "name": "results", "type": "Record<string,ResultOrError>" }],
          "returns": { "totalAnalyses": "number", "successfulAnalyses": "number", "averageConfidence": "number", "recommendedAction": "string" }
        }
      }
    }
  },
  "validation": {
    "InputValidator.validateTransactionData": {
      "requires": ["id", "amount", "timestamp", "from", "to"],
      "sanitizes": ["id", "from", "to (strip <>\"'&)"],
      "constraints": { "amount": "number >= 0" },
      "errors": ["Error('Invalid transaction data ...')", "Error('Missing required field: ...')", "Error('Amount must be a positive number')"]
    },
    "InputValidator.validatePrompt": {
      "constraints": { "type": "string", "minLength": 1, "maxLength": 10000 },
      "returns": "trimmed string",
      "errors": ["Error('Prompt must be a non-empty string')", "Error('Prompt too long: maximum 10,000 characters')"]
    }
  },
  "rateLimiting": {
    "algorithm": "fixed-window per provider",
    "windowKey": "provider + floor(now / windowMs)",
    "enforcedOn": ["xai", "openai", "anthropic"],
    "defaults": {
      "xai": { "requests": 1000, "window": 60000 },
      "openai": { "requests": 500, "window": 60000 },
      "anthropic": { "requests": 300, "window": 60000 }
    },
    "mock": "no external limit; simulated latency 200-800ms"
  },
  "security": {
    "inputValidation": "transaction and prompt sanitization",
    "timeouts": "30s abort controller on upstream calls",
    "keyHandling": "keys read from process.env only; never logged",
    "demoMode": "mock provider always enabled; no keys required"
  },
  "observability": {
    "metrics": "internal rolling aggregates: totalAnalyses, averageLatency(ms), successRate, providerUsage",
    "events": ["analysis_complete", "analysis_error"]
  },
  "usageExamples": {
    "singleProvider": "new GrokAEGESIntegration({ enableConsensus:false, primaryProvider:'xai' }).analyzeTransactionWithAI(tx)",
    "consensus": "new GrokAEGESIntegration({ enableConsensus:true }).analyzeTransactionWithAI(tx)",
    "health": "integration.healthCheck()",
    "metrics": "integration.getMetrics()",
    "multiAI": "new MultiAIAnalyzer().analyzeWithMultipleProviders(tx)"
  }
}
